#Initial model setup & algorithm parameters
#------------------------------------------
[rk4input]
number_of_integration=365*1000          #Numerical integration steps, 1000 years
stepsize_of_integration=60*60*24        #Numerical stepsize (in seconds), 1 day
spatial_resolution=2                    #Width of one latitude belt (in degree), 2Â° -> 90 grid points
both_hemispheres=True                   #North and southern hemipshere
latitudinal_circle=False                #Definition of the temperature on the latitude boundary
latitudinal_belt=True                   #Definition of the temperature in the latitude belt center

eq_condition=False                      #Abort condition if an equilibrium state is reached (defined on the standard deviation of the last x steps)
eq_condition_length=100                 #Number of last steps to calculate the standard deviation
eq_condition_amplitude=1e-3             #Conditioning value for the standard deviation comparison

data_readout=int(365/12)                #Time stepping in output data, each month
number_of_externals=0                   #Number of arrays to create when using external forcing, no frocing used -> 0

[initials]
time=0                                  #Initial time  
zmt=273+15                              #Initial value for ZMT (baseline value for a cosine distributed ZMT)
gmt=273+15                              #Initial value for GMT
initial_temperature_cosine=True         #Use a cosine distributed ZMT?
initial_temperature_amplitude=30        #Max-Min temperature from Pole to Equator
initial_temperature_noise=False         #Apply random offest for each T_i?
initial_temperature_noise_amplitude=5   #Maximum random value 

#Model structure & physical equation parameters
#----------------------------------------------
[eqparam]
C_ao=70*4.2e6                           #The global heat capacity with  C_ao= MLD * (density *spec. heat capacity)

# Add a [func_] for each energy flux included in the EBM and indicate the function for this energy flux in func=
[func0]
func=flux_down().insolation             #Downward radiation function, insolation
Q=334.93*4#1366.14*0.99634 #1361.14     #Solar constant, here S=4*Q
m=1                                     #Scaling for R_down
dQ=0                                    #Offset for Q-distribution

albedo=albedo().static_bud              #Albedo function used, budyko with transitions defined on latitude   
albedoread=True                         #Output albedo values?
albedoparam=[0.32,60,70]                #array of the parameters used in this function, [low latitude albedo value alpha_l, the transition latitudes Lat_l_m, Lat_m_h]

noise=False                             #Noise force R_down during the simulation?
noiseamp=342*0.03                       #Noise amplitude
noisedelay=1                            #Time stepping to update the noise forcing value
seed=True                               #Set a seed to ensure same random values each time?
seedmanipulation=0                      #Set seed

solarinput=True                         #Calculate Q distribution through Berger 1991?
convfactor=1                            #Conversion for solar constant
timeunit='annualmean'                   #Time dependency of Q? Annual mean, or with time dependecy of months, weeks, days, minutes, seconds
orbital=False                           #Use orbital forcing?
orbitalyear=0                           #Which year?
updatefrequency='number_of_integration' #Time stepping for orbital forcing update, 'number_of_integration' -> never

[func1]
func=flux_up().budyko_noclouds          #Upward radiation function, linearized budyko radiation R_up=A+B*T
activation=True                         #Activate this function in the model?
a=198.875                               #Offest A
b=1.435                                 #Gradient G

[func2]
func=transfer().budyko                  #Transfer flux function, budyko transfer F=beta*(T_gmt-T_i)
beta=3.74                               #beta value
activated=True                          #Activate this function in the model?


